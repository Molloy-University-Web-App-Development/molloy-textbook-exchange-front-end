{"ast":null,"code":"const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'; // For convenience, let people hash a string, not just a Uint8Array\n\nfunction normalizeInput(input) {\n  let ret;\n\n  if (input instanceof Uint8Array) {\n    ret = input;\n  } else if (typeof input === 'string') {\n    const encoder = new TextEncoder();\n    ret = encoder.encode(input);\n  } else {\n    throw new Error(ERROR_MSG_INPUT);\n  }\n\n  return ret;\n} // Converts a Uint8Array to a hexadecimal string\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\n\n\nfunction toHex(bytes) {\n  return Array.prototype.map.call(bytes, function (n) {\n    return (n < 16 ? '0' : '') + n.toString(16);\n  }).join('');\n} // Converts any value in [0...2^32-1] to an 8-character hex string\n\n\nfunction uint32ToHex(val) {\n  return (0x100000000 + val).toString(16).substring(1);\n} // For debugging: prints out hash state in the same format as the RFC\n// sample computation exactly, so that you can diff\n\n\nfunction debugPrint(label, arr, size) {\n  let msg = '\\n' + label + ' = ';\n\n  for (let i = 0; i < arr.length; i += 2) {\n    if (size === 32) {\n      msg += uint32ToHex(arr[i]).toUpperCase();\n      msg += ' ';\n      msg += uint32ToHex(arr[i + 1]).toUpperCase();\n    } else if (size === 64) {\n      msg += uint32ToHex(arr[i + 1]).toUpperCase();\n      msg += uint32ToHex(arr[i]).toUpperCase();\n    } else throw new Error('Invalid size ' + size);\n\n    if (i % 6 === 4) {\n      msg += '\\n' + new Array(label.length + 4).join(' ');\n    } else if (i < arr.length - 2) {\n      msg += ' ';\n    }\n  }\n\n  console.log(msg);\n} // For performance testing: generates N bytes of input, hashes M times\n// Measures and prints MB/second hash performance each time\n\n\nfunction testSpeed(hashFn, N, M) {\n  let startMs = new Date().getTime();\n  const input = new Uint8Array(N);\n\n  for (let i = 0; i < N; i++) {\n    input[i] = i % 256;\n  }\n\n  const genMs = new Date().getTime();\n  console.log('Generated random input in ' + (genMs - startMs) + 'ms');\n  startMs = genMs;\n\n  for (let i = 0; i < M; i++) {\n    const hashHex = hashFn(input);\n    const hashMs = new Date().getTime();\n    const ms = hashMs - startMs;\n    startMs = hashMs;\n    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');\n    console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND');\n  }\n}\n\nmodule.exports = {\n  normalizeInput: normalizeInput,\n  toHex: toHex,\n  debugPrint: debugPrint,\n  testSpeed: testSpeed\n};","map":{"version":3,"names":["ERROR_MSG_INPUT","normalizeInput","input","ret","Uint8Array","encoder","TextEncoder","encode","Error","toHex","bytes","Array","prototype","map","call","n","toString","join","uint32ToHex","val","substring","debugPrint","label","arr","size","msg","i","length","toUpperCase","console","log","testSpeed","hashFn","N","M","startMs","Date","getTime","genMs","hashHex","hashMs","ms","Math","round","module","exports"],"sources":["/Users/roberttineo/Documents/GitHub/molloy-textbook-exchange-front-end/node_modules/blakejs/util.js"],"sourcesContent":["const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'\n\n// For convenience, let people hash a string, not just a Uint8Array\nfunction normalizeInput (input) {\n  let ret\n  if (input instanceof Uint8Array) {\n    ret = input\n  } else if (typeof input === 'string') {\n    const encoder = new TextEncoder()\n    ret = encoder.encode(input)\n  } else {\n    throw new Error(ERROR_MSG_INPUT)\n  }\n  return ret\n}\n\n// Converts a Uint8Array to a hexadecimal string\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\nfunction toHex (bytes) {\n  return Array.prototype.map\n    .call(bytes, function (n) {\n      return (n < 16 ? '0' : '') + n.toString(16)\n    })\n    .join('')\n}\n\n// Converts any value in [0...2^32-1] to an 8-character hex string\nfunction uint32ToHex (val) {\n  return (0x100000000 + val).toString(16).substring(1)\n}\n\n// For debugging: prints out hash state in the same format as the RFC\n// sample computation exactly, so that you can diff\nfunction debugPrint (label, arr, size) {\n  let msg = '\\n' + label + ' = '\n  for (let i = 0; i < arr.length; i += 2) {\n    if (size === 32) {\n      msg += uint32ToHex(arr[i]).toUpperCase()\n      msg += ' '\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n    } else if (size === 64) {\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n      msg += uint32ToHex(arr[i]).toUpperCase()\n    } else throw new Error('Invalid size ' + size)\n    if (i % 6 === 4) {\n      msg += '\\n' + new Array(label.length + 4).join(' ')\n    } else if (i < arr.length - 2) {\n      msg += ' '\n    }\n  }\n  console.log(msg)\n}\n\n// For performance testing: generates N bytes of input, hashes M times\n// Measures and prints MB/second hash performance each time\nfunction testSpeed (hashFn, N, M) {\n  let startMs = new Date().getTime()\n\n  const input = new Uint8Array(N)\n  for (let i = 0; i < N; i++) {\n    input[i] = i % 256\n  }\n  const genMs = new Date().getTime()\n  console.log('Generated random input in ' + (genMs - startMs) + 'ms')\n  startMs = genMs\n\n  for (let i = 0; i < M; i++) {\n    const hashHex = hashFn(input)\n    const hashMs = new Date().getTime()\n    const ms = hashMs - startMs\n    startMs = hashMs\n    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...')\n    console.log(\n      Math.round((N / (1 << 20) / (ms / 1000)) * 100) / 100 + ' MB PER SECOND'\n    )\n  }\n}\n\nmodule.exports = {\n  normalizeInput: normalizeInput,\n  toHex: toHex,\n  debugPrint: debugPrint,\n  testSpeed: testSpeed\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}