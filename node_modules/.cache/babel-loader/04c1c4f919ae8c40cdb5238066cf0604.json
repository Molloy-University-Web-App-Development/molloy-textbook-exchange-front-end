{"ast":null,"code":"'use strict';\n\nconst constants = require('./constants');\n\nconst MT = constants.MT;\nconst SIMPLE = constants.SIMPLE;\nconst SYMS = constants.SYMS;\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\n\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor(value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + typeof value);\n    }\n\n    if (value < 0 || value > 255 || (value | 0) !== value) {\n      throw new Error('value must be a small positive integer: ' + value);\n    }\n\n    this.value = value;\n  }\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n\n\n  toString() {\n    return 'simple(' + this.value + ')';\n  }\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n\n\n  inspect() {\n    return 'simple(' + this.value + ')';\n  }\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n\n\n  encodeCBOR(gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT);\n  }\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n\n\n  static isSimple(obj) {\n    return obj instanceof Simple;\n  }\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n\n\n  static decode(val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true;\n    }\n\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false;\n\n      case SIMPLE.TRUE:\n        return true;\n\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null;\n        } else {\n          return SYMS.NULL;\n        }\n\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined;\n        } else {\n          return SYMS.UNDEFINED;\n        }\n\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK');\n        }\n\n        return SYMS.BREAK;\n\n      default:\n        return new Simple(val);\n    }\n  }\n\n}\n\nmodule.exports = Simple;","map":{"version":3,"names":["constants","require","MT","SIMPLE","SYMS","Simple","constructor","value","Error","toString","inspect","encodeCBOR","gen","_pushInt","SIMPLE_FLOAT","isSimple","obj","decode","val","hasParent","FALSE","TRUE","NULL","UNDEFINED","undefined","BREAK","module","exports"],"sources":["/Users/roberttineo/Documents/GitHub/molloy-textbook-exchange-front-end/node_modules/borc/src/simple.js"],"sourcesContent":["'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,EAAE,GAAGF,SAAS,CAACE,EAArB;AACA,MAAMC,MAAM,GAAGH,SAAS,CAACG,MAAzB;AACA,MAAMC,IAAI,GAAGJ,SAAS,CAACI,IAAvB;AAEA;AACA;AACA;;AACA,MAAMC,MAAN,CAAa;EACX;AACF;AACA;AACA;AACA;EACEC,WAAW,CAAEC,KAAF,EAAS;IAClB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,MAAM,IAAIC,KAAJ,CAAU,0BAA2B,OAAOD,KAA5C,CAAN;IACD;;IACD,IAAKA,KAAK,GAAG,CAAT,IAAgBA,KAAK,GAAG,GAAxB,IAAiC,CAACA,KAAK,GAAG,CAAT,MAAgBA,KAArD,EAA6D;MAC3D,MAAM,IAAIC,KAAJ,CAAU,6CAA6CD,KAAvD,CAAN;IACD;;IACD,KAAKA,KAAL,GAAaA,KAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,QAAQ,GAAI;IACV,OAAO,YAAY,KAAKF,KAAjB,GAAyB,GAAhC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEG,OAAO,GAAI;IACT,OAAO,YAAY,KAAKH,KAAjB,GAAyB,GAAhC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEI,UAAU,CAAEC,GAAF,EAAO;IACf,OAAOA,GAAG,CAACC,QAAJ,CAAa,KAAKN,KAAlB,EAAyBL,EAAE,CAACY,YAA5B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACiB,OAARC,QAAQ,CAAEC,GAAF,EAAO;IACpB,OAAOA,GAAG,YAAYX,MAAtB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACe,OAANY,MAAM,CAAEC,GAAF,EAAOC,SAAP,EAAkB;IAC7B,IAAIA,SAAS,IAAI,IAAjB,EAAuB;MACrBA,SAAS,GAAG,IAAZ;IACD;;IACD,QAAQD,GAAR;MACE,KAAKf,MAAM,CAACiB,KAAZ;QACE,OAAO,KAAP;;MACF,KAAKjB,MAAM,CAACkB,IAAZ;QACE,OAAO,IAAP;;MACF,KAAKlB,MAAM,CAACmB,IAAZ;QACE,IAAIH,SAAJ,EAAe;UACb,OAAO,IAAP;QACD,CAFD,MAEO;UACL,OAAOf,IAAI,CAACkB,IAAZ;QACD;;MACH,KAAKnB,MAAM,CAACoB,SAAZ;QACE,IAAIJ,SAAJ,EAAe;UACb,OAAOK,SAAP;QACD,CAFD,MAEO;UACL,OAAOpB,IAAI,CAACmB,SAAZ;QACD;;MACH,KAAK,CAAC,CAAN;QACE,IAAI,CAACJ,SAAL,EAAgB;UACd,MAAM,IAAIX,KAAJ,CAAU,eAAV,CAAN;QACD;;QACD,OAAOJ,IAAI,CAACqB,KAAZ;;MACF;QACE,OAAO,IAAIpB,MAAJ,CAAWa,GAAX,CAAP;IAvBJ;EAyBD;;AA7FU;;AAgGbQ,MAAM,CAACC,OAAP,GAAiBtB,MAAjB"},"metadata":{},"sourceType":"script"}