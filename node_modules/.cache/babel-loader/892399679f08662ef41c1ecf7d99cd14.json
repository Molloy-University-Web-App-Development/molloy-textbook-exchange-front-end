{"ast":null,"code":"/*!\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict'; //import * as base58 from 'base58-universal';\n//import crypto from './crypto.js';\n\nimport * as defaultCodecs from './codecs.js';\nimport { Hashlink } from './Hashlink.js'; //import {stringToUint8Array} from './util.js';\n// setup exports for this module\n\nexport { Hashlink } from './Hashlink.js';\nexport { encode, decode, verify }; // setup the default encoder/decoder\n\nconst hlDefault = new Hashlink();\nhlDefault.use(new defaultCodecs.MultihashSha2256());\nhlDefault.use(new defaultCodecs.MultihashBlake2b64());\nhlDefault.use(new defaultCodecs.MultibaseBase58btc());\n/**\n * Encodes a hashlink. If only a `url` parameter is provided, the URL is\n * fetched, transformed, and encoded into a hashlink. If a data parameter\n * is provided, the hashlink is encoded from the data.\n *\n * @param {Object} options - The options for the encode operation.\n * @param {Uint8Array} options.data - The data associated with the given URL. If\n *   provided, this data is used to encode the cryptographic hash.\n * @param {Array} options.urls - One or more URLs that contain the data\n *   referred to by the hashlink.\n * @param {Array} options.codecs - One or more URLs that contain the data\n *   referred to by the hashlink.\n * @param {Object} options.meta - A set of key-value metadata that will be\n *   encoded into the hashlink.\n *\n * @returns {Promise<string>} Resolves to a string that is a hashlink.\n */\n\nasync function encode(_ref) {\n  let {\n    data,\n    urls,\n    url,\n    codecs = ['mh-sha2-256', 'mb-base58-btc'],\n    meta = {}\n  } = _ref;\n\n  if (url && !urls) {\n    urls = [url];\n  }\n\n  return await hlDefault.encode({\n    data,\n    urls,\n    codecs,\n    meta\n  });\n}\n/**\n * Decodes a hashlink resulting in an object with key-value pairs\n * representing the values encoded in the hashlink.\n *\n * @param {Object} options - The options for the encode operation.\n * @param {string} options.hashlink - The encoded hashlink value to decode.\n *\n * @returns {Object} Returns an object with the decoded hashlink values.\n */\n\n\nfunction decode(_ref2) {\n  let {\n    hashlink\n  } = _ref2;\n  throw new Error('Not implemented.');\n}\n/**\n * Verifies a hashlink resulting in a simple true or false value.\n *\n * @param {Object} options - The options for the encode operation.\n * @param {string} options.hashlink - The encoded hashlink value to verify.\n * @param {Uint8Array} options.data - Optional data to use when verifying\n *   hashlink.\n * @param {Array} options.resolvers - An array of Objects with key-value\n *   pairs. Each object must contain a `scheme` key associated with a\n *   Function({url, options}) that resolves any URL with the given scheme\n *   and options to data.\n *\n * @returns {Promise<boolean>} true if the hashlink is valid, false otherwise.\n */\n\n\nasync function verify(_ref3) {\n  let {\n    hashlink,\n    data,\n    resolvers\n  } = _ref3;\n  return hlDefault.verify({\n    hashlink,\n    data,\n    resolvers\n  });\n}","map":{"version":3,"names":["defaultCodecs","Hashlink","encode","decode","verify","hlDefault","use","MultihashSha2256","MultihashBlake2b64","MultibaseBase58btc","data","urls","url","codecs","meta","hashlink","Error","resolvers"],"sources":["/Users/roberttineo/Documents/GitHub/molloy-textbook-exchange-front-end/node_modules/hashlink/main.js"],"sourcesContent":["/*!\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n//import * as base58 from 'base58-universal';\n//import crypto from './crypto.js';\nimport * as defaultCodecs from './codecs.js';\nimport {Hashlink} from './Hashlink.js';\n//import {stringToUint8Array} from './util.js';\n\n// setup exports for this module\nexport {Hashlink} from './Hashlink.js';\nexport {\n  encode,\n  decode,\n  verify,\n};\n\n// setup the default encoder/decoder\nconst hlDefault = new Hashlink();\nhlDefault.use(new defaultCodecs.MultihashSha2256());\nhlDefault.use(new defaultCodecs.MultihashBlake2b64());\nhlDefault.use(new defaultCodecs.MultibaseBase58btc());\n\n/**\n * Encodes a hashlink. If only a `url` parameter is provided, the URL is\n * fetched, transformed, and encoded into a hashlink. If a data parameter\n * is provided, the hashlink is encoded from the data.\n *\n * @param {Object} options - The options for the encode operation.\n * @param {Uint8Array} options.data - The data associated with the given URL. If\n *   provided, this data is used to encode the cryptographic hash.\n * @param {Array} options.urls - One or more URLs that contain the data\n *   referred to by the hashlink.\n * @param {Array} options.codecs - One or more URLs that contain the data\n *   referred to by the hashlink.\n * @param {Object} options.meta - A set of key-value metadata that will be\n *   encoded into the hashlink.\n *\n * @returns {Promise<string>} Resolves to a string that is a hashlink.\n */\nasync function encode({data, urls, url,\n  codecs = ['mh-sha2-256', 'mb-base58-btc'], meta = {}}) {\n\n  if(url && !urls) {\n    urls = [url];\n  }\n\n  return await hlDefault.encode({data, urls, codecs, meta});\n}\n\n/**\n * Decodes a hashlink resulting in an object with key-value pairs\n * representing the values encoded in the hashlink.\n *\n * @param {Object} options - The options for the encode operation.\n * @param {string} options.hashlink - The encoded hashlink value to decode.\n *\n * @returns {Object} Returns an object with the decoded hashlink values.\n */\nfunction decode({hashlink}) {\n  throw new Error('Not implemented.');\n}\n\n/**\n * Verifies a hashlink resulting in a simple true or false value.\n *\n * @param {Object} options - The options for the encode operation.\n * @param {string} options.hashlink - The encoded hashlink value to verify.\n * @param {Uint8Array} options.data - Optional data to use when verifying\n *   hashlink.\n * @param {Array} options.resolvers - An array of Objects with key-value\n *   pairs. Each object must contain a `scheme` key associated with a\n *   Function({url, options}) that resolves any URL with the given scheme\n *   and options to data.\n *\n * @returns {Promise<boolean>} true if the hashlink is valid, false otherwise.\n */\nasync function verify({hashlink, data, resolvers}) {\n  return hlDefault.verify({hashlink, data, resolvers});\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,a,CAEA;AACA;;AACA,OAAO,KAAKA,aAAZ,MAA+B,aAA/B;AACA,SAAQC,QAAR,QAAuB,eAAvB,C,CACA;AAEA;;AACA,SAAQA,QAAR,QAAuB,eAAvB;AACA,SACEC,MADF,EAEEC,MAFF,EAGEC,MAHF,G,CAMA;;AACA,MAAMC,SAAS,GAAG,IAAIJ,QAAJ,EAAlB;AACAI,SAAS,CAACC,GAAV,CAAc,IAAIN,aAAa,CAACO,gBAAlB,EAAd;AACAF,SAAS,CAACC,GAAV,CAAc,IAAIN,aAAa,CAACQ,kBAAlB,EAAd;AACAH,SAAS,CAACC,GAAV,CAAc,IAAIN,aAAa,CAACS,kBAAlB,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeP,MAAf,OACyD;EAAA,IADnC;IAACQ,IAAD;IAAOC,IAAP;IAAaC,GAAb;IACpBC,MAAM,GAAG,CAAC,aAAD,EAAgB,eAAhB,CADW;IACuBC,IAAI,GAAG;EAD9B,CACmC;;EAEvD,IAAGF,GAAG,IAAI,CAACD,IAAX,EAAiB;IACfA,IAAI,GAAG,CAACC,GAAD,CAAP;EACD;;EAED,OAAO,MAAMP,SAAS,CAACH,MAAV,CAAiB;IAACQ,IAAD;IAAOC,IAAP;IAAaE,MAAb;IAAqBC;EAArB,CAAjB,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASX,MAAT,QAA4B;EAAA,IAAZ;IAACY;EAAD,CAAY;EAC1B,MAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeZ,MAAf,QAAmD;EAAA,IAA7B;IAACW,QAAD;IAAWL,IAAX;IAAiBO;EAAjB,CAA6B;EACjD,OAAOZ,SAAS,CAACD,MAAV,CAAiB;IAACW,QAAD;IAAWL,IAAX;IAAiBO;EAAjB,CAAjB,CAAP;AACD"},"metadata":{},"sourceType":"module"}