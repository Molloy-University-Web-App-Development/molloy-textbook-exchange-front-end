{"ast":null,"code":"/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n'use strict'; // baseN alphabet indexes\n\nconst _reverseAlphabets = {};\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param {Uint8Array} input the bytes to encode in a Uint8Array.\n * @param {number} maxline the maximum number of encoded characters per line to\n *          use, defaults to none.\n *\n * @return {string} the baseN-encoded output string.\n */\n\nexport function encode(input, alphabet, maxline) {\n  if (!(input instanceof Uint8Array)) {\n    throw new TypeError('\"input\" must be a Uint8Array.');\n  }\n\n  if (typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  if (maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  let output = '';\n  let i = 0;\n  const base = alphabet.length;\n  const first = alphabet.charAt(0);\n  const digits = [0];\n\n  for (i = 0; i < input.length; ++i) {\n    let carry = input[i];\n\n    for (let j = 0; j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = carry / base | 0;\n    }\n\n    while (carry > 0) {\n      digits.push(carry % base);\n      carry = carry / base | 0;\n    }\n  } // deal with leading zeros\n\n\n  for (i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n    output += first;\n  } // convert digits to a string\n\n\n  for (i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  if (maxline) {\n    const regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n}\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param {string} input the baseN-encoded input string.\n *\n * @return {Uint8Array} the decoded bytes in a Uint8Array.\n */\n\nexport function decode(input, alphabet) {\n  if (typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n\n  if (typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  if (input.length === 0) {\n    return new Uint8Array();\n  }\n\n  let table = _reverseAlphabets[alphabet];\n\n  if (!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n\n    for (let i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  } // remove whitespace characters\n\n\n  input = input.replace(/\\s/g, '');\n  const base = alphabet.length;\n  const first = alphabet.charAt(0);\n  const bytes = [0];\n\n  for (let i = 0; i < input.length; i++) {\n    const value = table[input.charCodeAt(i)];\n\n    if (value === undefined) {\n      return;\n    }\n\n    let carry = value;\n\n    for (let j = 0; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while (carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  } // deal with leading zeros\n\n\n  for (let k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  return new Uint8Array(bytes.reverse());\n}","map":{"version":3,"names":["_reverseAlphabets","encode","input","alphabet","maxline","Uint8Array","TypeError","undefined","length","output","i","base","first","charAt","digits","carry","j","push","regex","RegExp","match","join","decode","table","charCodeAt","replace","bytes","value","k","reverse"],"sources":["/Users/roberttineo/Documents/GitHub/molloy-textbook-exchange-front-end/node_modules/base58-universal/baseN.js"],"sourcesContent":["/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n'use strict';\n\n// baseN alphabet indexes\nconst _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param {Uint8Array} input the bytes to encode in a Uint8Array.\n * @param {number} maxline the maximum number of encoded characters per line to\n *          use, defaults to none.\n *\n * @return {string} the baseN-encoded output string.\n */\nexport function encode(input, alphabet, maxline) {\n  if(!(input instanceof Uint8Array)) {\n    throw new TypeError('\"input\" must be a Uint8Array.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n  if(input.length === 0) {\n    return '';\n  }\n\n  let output = '';\n\n  let i = 0;\n  const base = alphabet.length;\n  const first = alphabet.charAt(0);\n  const digits = [0];\n  for(i = 0; i < input.length; ++i) {\n    let carry = input[i];\n    for(let j = 0; j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = (carry / base) | 0;\n    }\n\n    while(carry > 0) {\n      digits.push(carry % base);\n      carry = (carry / base) | 0;\n    }\n  }\n\n  // deal with leading zeros\n  for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for(i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  if(maxline) {\n    const regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n}\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param {string} input the baseN-encoded input string.\n *\n * @return {Uint8Array} the decoded bytes in a Uint8Array.\n */\nexport function decode(input, alphabet) {\n  if(typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(input.length === 0) {\n    return new Uint8Array();\n  }\n\n  let table = _reverseAlphabets[alphabet];\n  if(!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for(let i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n\n  const base = alphabet.length;\n  const first = alphabet.charAt(0);\n  const bytes = [0];\n  for(let i = 0; i < input.length; i++) {\n    const value = table[input.charCodeAt(i)];\n    if(value === undefined) {\n      return;\n    }\n\n    let carry = value;\n    for(let j = 0; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while(carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for(let k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  return new Uint8Array(bytes.reverse());\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a,CAEA;;AACA,MAAMA,iBAAiB,GAAG,EAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;EAC/C,IAAG,EAAEF,KAAK,YAAYG,UAAnB,CAAH,EAAmC;IACjC,MAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;EACD;;EACD,IAAG,OAAOH,QAAP,KAAoB,QAAvB,EAAiC;IAC/B,MAAM,IAAIG,SAAJ,CAAc,8BAAd,CAAN;EACD;;EACD,IAAGF,OAAO,KAAKG,SAAZ,IAAyB,OAAOH,OAAP,KAAmB,QAA/C,EAAyD;IACvD,MAAM,IAAIE,SAAJ,CAAc,6BAAd,CAAN;EACD;;EACD,IAAGJ,KAAK,CAACM,MAAN,KAAiB,CAApB,EAAuB;IACrB,OAAO,EAAP;EACD;;EAED,IAAIC,MAAM,GAAG,EAAb;EAEA,IAAIC,CAAC,GAAG,CAAR;EACA,MAAMC,IAAI,GAAGR,QAAQ,CAACK,MAAtB;EACA,MAAMI,KAAK,GAAGT,QAAQ,CAACU,MAAT,CAAgB,CAAhB,CAAd;EACA,MAAMC,MAAM,GAAG,CAAC,CAAD,CAAf;;EACA,KAAIJ,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGR,KAAK,CAACM,MAArB,EAA6B,EAAEE,CAA/B,EAAkC;IAChC,IAAIK,KAAK,GAAGb,KAAK,CAACQ,CAAD,CAAjB;;IACA,KAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAM,CAACN,MAA1B,EAAkC,EAAEQ,CAApC,EAAuC;MACrCD,KAAK,IAAID,MAAM,CAACE,CAAD,CAAN,IAAa,CAAtB;MACAF,MAAM,CAACE,CAAD,CAAN,GAAYD,KAAK,GAAGJ,IAApB;MACAI,KAAK,GAAIA,KAAK,GAAGJ,IAAT,GAAiB,CAAzB;IACD;;IAED,OAAMI,KAAK,GAAG,CAAd,EAAiB;MACfD,MAAM,CAACG,IAAP,CAAYF,KAAK,GAAGJ,IAApB;MACAI,KAAK,GAAIA,KAAK,GAAGJ,IAAT,GAAiB,CAAzB;IACD;EACF,CAhC8C,CAkC/C;;;EACA,KAAID,CAAC,GAAG,CAAR,EAAWR,KAAK,CAACQ,CAAD,CAAL,KAAa,CAAb,IAAkBA,CAAC,GAAGR,KAAK,CAACM,MAAN,GAAe,CAAhD,EAAmD,EAAEE,CAArD,EAAwD;IACtDD,MAAM,IAAIG,KAAV;EACD,CArC8C,CAsC/C;;;EACA,KAAIF,CAAC,GAAGI,MAAM,CAACN,MAAP,GAAgB,CAAxB,EAA2BE,CAAC,IAAI,CAAhC,EAAmC,EAAEA,CAArC,EAAwC;IACtCD,MAAM,IAAIN,QAAQ,CAACW,MAAM,CAACJ,CAAD,CAAP,CAAlB;EACD;;EAED,IAAGN,OAAH,EAAY;IACV,MAAMc,KAAK,GAAG,IAAIC,MAAJ,CAAW,SAASf,OAAT,GAAmB,GAA9B,EAAmC,GAAnC,CAAd;IACAK,MAAM,GAAGA,MAAM,CAACW,KAAP,CAAaF,KAAb,EAAoBG,IAApB,CAAyB,MAAzB,CAAT;EACD;;EAED,OAAOZ,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,MAAT,CAAgBpB,KAAhB,EAAuBC,QAAvB,EAAiC;EACtC,IAAG,OAAOD,KAAP,KAAiB,QAApB,EAA8B;IAC5B,MAAM,IAAII,SAAJ,CAAc,2BAAd,CAAN;EACD;;EACD,IAAG,OAAOH,QAAP,KAAoB,QAAvB,EAAiC;IAC/B,MAAM,IAAIG,SAAJ,CAAc,8BAAd,CAAN;EACD;;EACD,IAAGJ,KAAK,CAACM,MAAN,KAAiB,CAApB,EAAuB;IACrB,OAAO,IAAIH,UAAJ,EAAP;EACD;;EAED,IAAIkB,KAAK,GAAGvB,iBAAiB,CAACG,QAAD,CAA7B;;EACA,IAAG,CAACoB,KAAJ,EAAW;IACT;IACAA,KAAK,GAAGvB,iBAAiB,CAACG,QAAD,CAAjB,GAA8B,EAAtC;;IACA,KAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,QAAQ,CAACK,MAA5B,EAAoC,EAAEE,CAAtC,EAAyC;MACvCa,KAAK,CAACpB,QAAQ,CAACqB,UAAT,CAAoBd,CAApB,CAAD,CAAL,GAAgCA,CAAhC;IACD;EACF,CAlBqC,CAoBtC;;;EACAR,KAAK,GAAGA,KAAK,CAACuB,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;EAEA,MAAMd,IAAI,GAAGR,QAAQ,CAACK,MAAtB;EACA,MAAMI,KAAK,GAAGT,QAAQ,CAACU,MAAT,CAAgB,CAAhB,CAAd;EACA,MAAMa,KAAK,GAAG,CAAC,CAAD,CAAd;;EACA,KAAI,IAAIhB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,KAAK,CAACM,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;IACpC,MAAMiB,KAAK,GAAGJ,KAAK,CAACrB,KAAK,CAACsB,UAAN,CAAiBd,CAAjB,CAAD,CAAnB;;IACA,IAAGiB,KAAK,KAAKpB,SAAb,EAAwB;MACtB;IACD;;IAED,IAAIQ,KAAK,GAAGY,KAAZ;;IACA,KAAI,IAAIX,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGU,KAAK,CAAClB,MAAzB,EAAiC,EAAEQ,CAAnC,EAAsC;MACpCD,KAAK,IAAIW,KAAK,CAACV,CAAD,CAAL,GAAWL,IAApB;MACAe,KAAK,CAACV,CAAD,CAAL,GAAWD,KAAK,GAAG,IAAnB;MACAA,KAAK,KAAK,CAAV;IACD;;IAED,OAAMA,KAAK,GAAG,CAAd,EAAiB;MACfW,KAAK,CAACT,IAAN,CAAWF,KAAK,GAAG,IAAnB;MACAA,KAAK,KAAK,CAAV;IACD;EACF,CA3CqC,CA6CtC;;;EACA,KAAI,IAAIa,CAAC,GAAG,CAAZ,EAAe1B,KAAK,CAAC0B,CAAD,CAAL,KAAahB,KAAb,IAAsBgB,CAAC,GAAG1B,KAAK,CAACM,MAAN,GAAe,CAAxD,EAA2D,EAAEoB,CAA7D,EAAgE;IAC9DF,KAAK,CAACT,IAAN,CAAW,CAAX;EACD;;EAED,OAAO,IAAIZ,UAAJ,CAAeqB,KAAK,CAACG,OAAN,EAAf,CAAP;AACD"},"metadata":{},"sourceType":"module"}