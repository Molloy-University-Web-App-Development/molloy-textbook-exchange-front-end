{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst {\n  URL\n} = require('iso-url');\n\nconst Bignumber = require('bignumber.js').BigNumber;\n\nconst utils = require('./utils');\n\nconst constants = require('./constants');\n\nconst MT = constants.MT;\nconst NUMBYTES = constants.NUMBYTES;\nconst SHIFT32 = constants.SHIFT32;\nconst SYMS = constants.SYMS;\nconst TAG = constants.TAG;\nconst HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;\nconst FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;\nconst DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;\nconst TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;\nconst FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;\nconst UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;\nconst NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;\nconst MAXINT_BN = new Bignumber('0x20000000000000');\nconst BUF_NAN = Buffer.from('f97e00', 'hex');\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex');\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex');\n\nfunction toType(obj) {\n  // [object Type]\n  // --------8---1\n  return {}.toString.call(obj).slice(8, -1);\n}\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\n\n\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor(options) {\n    options = options || {};\n    this.streaming = typeof options.stream === 'function';\n    this.onData = options.stream;\n    this.semanticTypes = [[URL, this._pushUrl], [Bignumber, this._pushBigNumber]];\n    const addTypes = options.genTypes || [];\n    const len = addTypes.length;\n\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(addTypes[i][0], addTypes[i][1]);\n    }\n\n    this._reset();\n  }\n\n  addSemanticType(type, fun) {\n    const len = this.semanticTypes.length;\n\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0];\n\n      if (typ === type) {\n        const old = this.semanticTypes[i][1];\n        this.semanticTypes[i][1] = fun;\n        return old;\n      }\n    }\n\n    this.semanticTypes.push([type, fun]);\n    return null;\n  }\n\n  push(val) {\n    if (!val) {\n      return true;\n    }\n\n    this.result[this.offset] = val;\n    this.resultMethod[this.offset] = 0;\n    this.resultLength[this.offset] = val.length;\n    this.offset++;\n\n    if (this.streaming) {\n      this.onData(this.finalize());\n    }\n\n    return true;\n  }\n\n  pushWrite(val, method, len) {\n    this.result[this.offset] = val;\n    this.resultMethod[this.offset] = method;\n    this.resultLength[this.offset] = len;\n    this.offset++;\n\n    if (this.streaming) {\n      this.onData(this.finalize());\n    }\n\n    return true;\n  }\n\n  _pushUInt8(val) {\n    return this.pushWrite(val, 1, 1);\n  }\n\n  _pushUInt16BE(val) {\n    return this.pushWrite(val, 2, 2);\n  }\n\n  _pushUInt32BE(val) {\n    return this.pushWrite(val, 3, 4);\n  }\n\n  _pushDoubleBE(val) {\n    return this.pushWrite(val, 4, 8);\n  }\n\n  _pushNaN() {\n    return this.push(BUF_NAN);\n  }\n\n  _pushInfinity(obj) {\n    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;\n    return this.push(half);\n  }\n\n  _pushFloat(obj) {\n    const b2 = Buffer.allocUnsafe(2);\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2);\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4);\n    b4.writeFloatBE(obj, 0);\n\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4);\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);\n  }\n\n  _pushInt(obj, mt, orig) {\n    const m = mt << 5;\n\n    if (obj < 24) {\n      return this._pushUInt8(m | obj);\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig);\n    }\n\n    return this._pushFloat(obj);\n  }\n\n  _pushIntNum(obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj);\n    } else {\n      return this._pushInt(obj, MT.POS_INT);\n    }\n  }\n\n  _pushNumber(obj) {\n    switch (false) {\n      case obj === obj:\n        // eslint-disable-line\n        return this._pushNaN(obj);\n\n      case isFinite(obj):\n        return this._pushInfinity(obj);\n\n      case obj % 1 !== 0:\n        return this._pushIntNum(obj);\n\n      default:\n        return this._pushFloat(obj);\n    }\n  }\n\n  _pushString(obj) {\n    const len = Buffer.byteLength(obj, 'utf8');\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len);\n  }\n\n  _pushBoolean(obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE);\n  }\n\n  _pushUndefined(obj) {\n    return this._pushUInt8(UNDEFINED);\n  }\n\n  _pushArray(gen, obj) {\n    const len = obj.length;\n\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _pushTag(tag) {\n    return this._pushInt(tag, MT.TAG);\n  }\n\n  _pushDate(gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000));\n  }\n\n  _pushBuffer(gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);\n  }\n\n  _pushNoFilter(gen, obj) {\n    return gen._pushBuffer(gen, obj.slice());\n  }\n\n  _pushRegexp(gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);\n  }\n\n  _pushSet(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false;\n    }\n\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _pushUrl(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());\n  }\n\n  _pushBigint(obj) {\n    let tag = TAG.POS_BIGINT;\n\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1);\n      tag = TAG.NEG_BIGINT;\n    }\n\n    let str = obj.toString(16);\n\n    if (str.length % 2) {\n      str = '0' + str;\n    }\n\n    const buf = Buffer.from(str, 'hex');\n    return this._pushTag(tag) && this._pushBuffer(this, buf);\n  }\n\n  _pushBigNumber(gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN();\n    }\n\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);\n    }\n\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj);\n    }\n\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {\n      return false;\n    }\n\n    const dec = obj.decimalPlaces();\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec));\n\n    if (!gen._pushIntNum(-dec)) {\n      return false;\n    }\n\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber());\n    } else {\n      return gen._pushBigint(slide);\n    }\n  }\n\n  _pushMap(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false;\n    }\n\n    return this._pushRawMap(obj.size, Array.from(obj));\n  }\n\n  _pushObject(obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL);\n    }\n\n    var len = this.semanticTypes.length;\n\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj);\n      }\n    }\n\n    var f = obj.encodeCBOR;\n\n    if (typeof f === 'function') {\n      return f.call(obj, this);\n    }\n\n    var keys = Object.keys(obj);\n    var keyLength = keys.length;\n\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false;\n    }\n\n    return this._pushRawMap(keyLength, keys.map(k => [k, obj[k]]));\n  }\n\n  _pushRawMap(len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0]);\n      return a;\n    }).sort(utils.keySorter);\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false;\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n\n\n  write(obj) {\n    return this.pushAny(obj);\n  }\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n\n\n  pushAny(obj) {\n    var typ = toType(obj);\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj);\n\n      case 'String':\n        return this._pushString(obj);\n\n      case 'Boolean':\n        return this._pushBoolean(obj);\n\n      case 'Object':\n        return this._pushObject(obj);\n\n      case 'Array':\n        return this._pushArray(this, obj);\n\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj));\n\n      case 'Null':\n        return this._pushUInt8(NULL);\n\n      case 'Undefined':\n        return this._pushUndefined(obj);\n\n      case 'Map':\n        return this._pushMap(this, obj);\n\n      case 'Set':\n        return this._pushSet(this, obj);\n\n      case 'URL':\n        return this._pushUrl(this, obj);\n\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj);\n\n      case 'Date':\n        return this._pushDate(this, obj);\n\n      case 'RegExp':\n        return this._pushRegexp(this, obj);\n\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null);\n\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined);\n          // TODO: Add pluggable support for other symbols\n\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString());\n        }\n\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''));\n    }\n  }\n\n  finalize() {\n    if (this.offset === 0) {\n      return null;\n    }\n\n    var result = this.result;\n    var resultLength = this.resultLength;\n    var resultMethod = this.resultMethod;\n    var offset = this.offset; // Determine the size of the buffer\n\n    var size = 0;\n    var i = 0;\n\n    for (; i < offset; i++) {\n      size += resultLength[i];\n    }\n\n    var res = Buffer.allocUnsafe(size);\n    var index = 0;\n    var length = 0; // Write the content into the result buffer\n\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i];\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index);\n          break;\n\n        case 1:\n          res.writeUInt8(result[i], index, true);\n          break;\n\n        case 2:\n          res.writeUInt16BE(result[i], index, true);\n          break;\n\n        case 3:\n          res.writeUInt32BE(result[i], index, true);\n          break;\n\n        case 4:\n          res.writeDoubleBE(result[i], index, true);\n          break;\n\n        case 5:\n          res.write(result[i], index, length, 'utf8');\n          break;\n\n        default:\n          throw new Error('unkown method');\n      }\n\n      index += length;\n    }\n\n    var tmp = res;\n\n    this._reset();\n\n    return tmp;\n  }\n\n  _reset() {\n    this.result = [];\n    this.resultMethod = [];\n    this.resultLength = [];\n    this.offset = 0;\n  }\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n\n\n  static encode(o) {\n    const enc = new Encoder();\n    const ret = enc.pushAny(o);\n\n    if (!ret) {\n      throw new Error('Failed to encode input');\n    }\n\n    return enc.finalize();\n  }\n\n}\n\nmodule.exports = Encoder;","map":{"version":3,"names":["Buffer","require","URL","Bignumber","BigNumber","utils","constants","MT","NUMBYTES","SHIFT32","SYMS","TAG","HALF","SIMPLE_FLOAT","TWO","FLOAT","FOUR","DOUBLE","EIGHT","TRUE","SIMPLE","FALSE","UNDEFINED","NULL","MAXINT_BN","BUF_NAN","from","BUF_INF_NEG","BUF_INF_POS","toType","obj","toString","call","slice","Encoder","constructor","options","streaming","stream","onData","semanticTypes","_pushUrl","_pushBigNumber","addTypes","genTypes","len","length","i","addSemanticType","_reset","type","fun","typ","old","push","val","result","offset","resultMethod","resultLength","finalize","pushWrite","method","_pushUInt8","_pushUInt16BE","_pushUInt32BE","_pushDoubleBE","_pushNaN","_pushInfinity","half","_pushFloat","b2","allocUnsafe","writeHalf","parseHalf","b4","writeFloatBE","readFloatBE","_pushInt","mt","orig","m","ONE","Number","MAX_SAFE_INTEGER","Math","floor","NEG_INT","_pushIntNum","POS_INT","_pushNumber","isFinite","_pushString","byteLength","UTF8_STRING","_pushBoolean","_pushUndefined","_pushArray","gen","ARRAY","j","pushAny","_pushTag","tag","_pushDate","DATE_EPOCH","round","_pushBuffer","BYTE_STRING","_pushNoFilter","_pushRegexp","REGEXP","source","_pushSet","size","x","URI","format","_pushBigint","POS_BIGINT","isNegative","negated","minus","NEG_BIGINT","str","buf","isNaN","Infinity","isInteger","DECIMAL_FRAC","dec","decimalPlaces","slide","multipliedBy","pow","abs","isLessThan","toNumber","_pushMap","MAP","_pushRawMap","Array","_pushObject","f","encodeCBOR","keys","Object","keyLength","map","k","a","encode","sort","keySorter","write","isBuffer","undefined","Error","res","index","copy","writeUInt8","writeUInt16BE","writeUInt32BE","writeDoubleBE","tmp","o","enc","ret","module","exports"],"sources":["/Users/roberttineo/Documents/GitHub/molloy-textbook-exchange-front-end/node_modules/borc/src/encoder.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}