{"ast":null,"code":"/*!\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nimport * as base58 from 'base58-universal';\nimport { blake2b } from 'blakejs';\nimport crypto from './crypto.js';\nimport { TextDecoder, stringToUint8Array } from './util.js';\n\nclass MultihashSha2256 {\n  /**\n   * Creates a new MultihashSha2256 data codec.\n   *\n   * @returns {MultihashSha2256} A MultihashSha2256 used to encode and decode\n   *   Multihash SHA-2 256-bit values.\n   */\n  constructor() {\n    this.identifier = new Uint8Array([0x12, 0x20]);\n    this.algorithm = 'mh-sha2-256';\n  }\n  /**\n   * Encoder that takes a Uint8Array as input and performs a SHA-2\n   * cryptographic hash on the data and outputs a multihash-encoded value.\n   *\n   * @param {Uint8Array} input - The input for the encode function.\n   *\n   * @returns {Uint8Array} The output of the encode function.\n   */\n\n\n  async encode(input) {\n    const sha2256 = new Uint8Array(await crypto.subtle.digest({\n      name: 'SHA-256'\n    }, input));\n    const mhsha2256 = new Uint8Array(sha2256.byteLength + this.identifier.byteLength);\n    mhsha2256.set(this.identifier, 0);\n    mhsha2256.set(sha2256, this.identifier.byteLength);\n    return mhsha2256;\n  }\n\n}\n\nclass MultihashBlake2b64 {\n  /**\n   * Creates a new MultihashBlake2b64 data codec.\n   *\n   * @returns {MultihashBlake2b64} A MultihashBlake2b64 used to encode and\n   *   decode Multihash Blake2b 64-bit values.\n   */\n  constructor() {\n    this.identifier = new Uint8Array([0xb2, 0x08, 0x08]);\n    this.algorithm = 'mh-blake2b-64';\n  }\n  /**\n   * Encoder function that takes a Uint8Array as input and performs a blake2b\n   * cryptographic hash on the data and outputs a multihash-encoded value.\n   *\n   * @param {Uint8Array} input - The input for the encode function.\n   *\n   * @returns {Uint8Array} The output of the encode function.\n   */\n\n\n  async encode(input) {\n    const blake2b64 = blake2b(input, null, 8);\n    const mhblake2b64 = new Uint8Array(blake2b64.byteLength + this.identifier.byteLength);\n    mhblake2b64.set(this.identifier, 0);\n    mhblake2b64.set(blake2b64, this.identifier.byteLength);\n    return mhblake2b64;\n  }\n\n}\n\nclass MultibaseBase58btc {\n  /**\n   * Creates a new MultibaseBase58btc data codec.\n   *\n   * @returns {MultibaseBase58btc} A MultibaseBase58btc used to encode and\n   *   decode Multibase base58btc values.\n   */\n  constructor() {\n    this.identifier = new Uint8Array([0x7a]);\n    this.algorithm = 'mb-base58-btc';\n  }\n  /**\n   * Encoder function that takes a Uint8Array as input and performs a multibase\n   * base58btc encoding on the data.\n   *\n   * @param {Uint8Array} input - The input for the encode function.\n   *\n   * @returns {Uint8Array} The output of the encode function.\n   */\n\n\n  encode(input) {\n    return new Uint8Array(stringToUint8Array('z' + base58.encode(input)));\n  }\n  /**\n   * Decoder function that takes a Uint8Array as input and performs a multibase\n   * base58btc decode on the data.\n   *\n   * @param {Uint8Array} input - The input for the decode function.\n   *\n   * @returns {Uint8Array} The output of the decode function.\n   */\n\n\n  decode(input) {\n    return base58.decode(new TextDecoder('utf-8').decode(input.slice(1)));\n  }\n\n}\n\nexport { MultihashSha2256, MultihashBlake2b64, MultibaseBase58btc };","map":{"version":3,"names":["base58","blake2b","crypto","TextDecoder","stringToUint8Array","MultihashSha2256","constructor","identifier","Uint8Array","algorithm","encode","input","sha2256","subtle","digest","name","mhsha2256","byteLength","set","MultihashBlake2b64","blake2b64","mhblake2b64","MultibaseBase58btc","decode","slice"],"sources":["/Users/roberttineo/Documents/GitHub/molloy-textbook-exchange-front-end/node_modules/hashlink/codecs.js"],"sourcesContent":["/*!\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nimport * as base58 from 'base58-universal';\nimport {blake2b} from 'blakejs';\nimport crypto from './crypto.js';\nimport {TextDecoder, stringToUint8Array} from './util.js';\n\nclass MultihashSha2256 {\n  /**\n   * Creates a new MultihashSha2256 data codec.\n   *\n   * @returns {MultihashSha2256} A MultihashSha2256 used to encode and decode\n   *   Multihash SHA-2 256-bit values.\n   */\n  constructor() {\n    this.identifier = new Uint8Array([0x12, 0x20]);\n    this.algorithm = 'mh-sha2-256';\n  }\n\n  /**\n   * Encoder that takes a Uint8Array as input and performs a SHA-2\n   * cryptographic hash on the data and outputs a multihash-encoded value.\n   *\n   * @param {Uint8Array} input - The input for the encode function.\n   *\n   * @returns {Uint8Array} The output of the encode function.\n   */\n  async encode(input) {\n    const sha2256 = new Uint8Array(\n      await crypto.subtle.digest({name: 'SHA-256'}, input));\n    const mhsha2256 = new Uint8Array(\n      sha2256.byteLength + this.identifier.byteLength);\n\n    mhsha2256.set(this.identifier, 0);\n    mhsha2256.set(sha2256, this.identifier.byteLength);\n\n    return mhsha2256;\n  }\n}\n\nclass MultihashBlake2b64 {\n  /**\n   * Creates a new MultihashBlake2b64 data codec.\n   *\n   * @returns {MultihashBlake2b64} A MultihashBlake2b64 used to encode and\n   *   decode Multihash Blake2b 64-bit values.\n   */\n  constructor() {\n    this.identifier = new Uint8Array([0xb2, 0x08, 0x08]);\n    this.algorithm = 'mh-blake2b-64';\n  }\n\n  /**\n   * Encoder function that takes a Uint8Array as input and performs a blake2b\n   * cryptographic hash on the data and outputs a multihash-encoded value.\n   *\n   * @param {Uint8Array} input - The input for the encode function.\n   *\n   * @returns {Uint8Array} The output of the encode function.\n   */\n  async encode(input) {\n    const blake2b64 = blake2b(input, null, 8);\n    const mhblake2b64 = new Uint8Array(\n      blake2b64.byteLength + this.identifier.byteLength);\n\n    mhblake2b64.set(this.identifier, 0);\n    mhblake2b64.set(blake2b64, this.identifier.byteLength);\n\n    return mhblake2b64;\n  }\n}\n\nclass MultibaseBase58btc {\n  /**\n   * Creates a new MultibaseBase58btc data codec.\n   *\n   * @returns {MultibaseBase58btc} A MultibaseBase58btc used to encode and\n   *   decode Multibase base58btc values.\n   */\n  constructor() {\n    this.identifier = new Uint8Array([0x7a]);\n    this.algorithm = 'mb-base58-btc';\n  }\n\n  /**\n   * Encoder function that takes a Uint8Array as input and performs a multibase\n   * base58btc encoding on the data.\n   *\n   * @param {Uint8Array} input - The input for the encode function.\n   *\n   * @returns {Uint8Array} The output of the encode function.\n   */\n  encode(input) {\n    return new Uint8Array(stringToUint8Array('z' + base58.encode(input)));\n  }\n\n  /**\n   * Decoder function that takes a Uint8Array as input and performs a multibase\n   * base58btc decode on the data.\n   *\n   * @param {Uint8Array} input - The input for the decode function.\n   *\n   * @returns {Uint8Array} The output of the decode function.\n   */\n  decode(input) {\n    return base58.decode(new TextDecoder('utf-8').decode(input.slice(1)));\n  }\n}\n\nexport {\n  MultihashSha2256,\n  MultihashBlake2b64,\n  MultibaseBase58btc\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,MAAZ,MAAwB,kBAAxB;AACA,SAAQC,OAAR,QAAsB,SAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAAQC,WAAR,EAAqBC,kBAArB,QAA8C,WAA9C;;AAEA,MAAMC,gBAAN,CAAuB;EACrB;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,GAAG;IACZ,KAAKC,UAAL,GAAkB,IAAIC,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,CAAf,CAAlB;IACA,KAAKC,SAAL,GAAiB,aAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACc,MAANC,MAAM,CAACC,KAAD,EAAQ;IAClB,MAAMC,OAAO,GAAG,IAAIJ,UAAJ,CACd,MAAMN,MAAM,CAACW,MAAP,CAAcC,MAAd,CAAqB;MAACC,IAAI,EAAE;IAAP,CAArB,EAAwCJ,KAAxC,CADQ,CAAhB;IAEA,MAAMK,SAAS,GAAG,IAAIR,UAAJ,CAChBI,OAAO,CAACK,UAAR,GAAqB,KAAKV,UAAL,CAAgBU,UADrB,CAAlB;IAGAD,SAAS,CAACE,GAAV,CAAc,KAAKX,UAAnB,EAA+B,CAA/B;IACAS,SAAS,CAACE,GAAV,CAAcN,OAAd,EAAuB,KAAKL,UAAL,CAAgBU,UAAvC;IAEA,OAAOD,SAAP;EACD;;AA9BoB;;AAiCvB,MAAMG,kBAAN,CAAyB;EACvB;AACF;AACA;AACA;AACA;AACA;EACEb,WAAW,GAAG;IACZ,KAAKC,UAAL,GAAkB,IAAIC,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAf,CAAlB;IACA,KAAKC,SAAL,GAAiB,eAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACc,MAANC,MAAM,CAACC,KAAD,EAAQ;IAClB,MAAMS,SAAS,GAAGnB,OAAO,CAACU,KAAD,EAAQ,IAAR,EAAc,CAAd,CAAzB;IACA,MAAMU,WAAW,GAAG,IAAIb,UAAJ,CAClBY,SAAS,CAACH,UAAV,GAAuB,KAAKV,UAAL,CAAgBU,UADrB,CAApB;IAGAI,WAAW,CAACH,GAAZ,CAAgB,KAAKX,UAArB,EAAiC,CAAjC;IACAc,WAAW,CAACH,GAAZ,CAAgBE,SAAhB,EAA2B,KAAKb,UAAL,CAAgBU,UAA3C;IAEA,OAAOI,WAAP;EACD;;AA7BsB;;AAgCzB,MAAMC,kBAAN,CAAyB;EACvB;AACF;AACA;AACA;AACA;AACA;EACEhB,WAAW,GAAG;IACZ,KAAKC,UAAL,GAAkB,IAAIC,UAAJ,CAAe,CAAC,IAAD,CAAf,CAAlB;IACA,KAAKC,SAAL,GAAiB,eAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,MAAM,CAACC,KAAD,EAAQ;IACZ,OAAO,IAAIH,UAAJ,CAAeJ,kBAAkB,CAAC,MAAMJ,MAAM,CAACU,MAAP,CAAcC,KAAd,CAAP,CAAjC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEY,MAAM,CAACZ,KAAD,EAAQ;IACZ,OAAOX,MAAM,CAACuB,MAAP,CAAc,IAAIpB,WAAJ,CAAgB,OAAhB,EAAyBoB,MAAzB,CAAgCZ,KAAK,CAACa,KAAN,CAAY,CAAZ,CAAhC,CAAd,CAAP;EACD;;AAlCsB;;AAqCzB,SACEnB,gBADF,EAEEc,kBAFF,EAGEG,kBAHF"},"metadata":{},"sourceType":"module"}