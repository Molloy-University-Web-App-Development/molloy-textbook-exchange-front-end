'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HashLink = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _propTypes = require('prop-types');

var PropTypes = _interopRequireWildcard(_propTypes);

var _reactRouterDom = require('react-router-dom');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HashLink = exports.HashLink = function (_React$Component) {
  _inherits(HashLink, _React$Component);

  function HashLink(props) {
    _classCallCheck(this, HashLink);

    var _this = _possibleConstructorReturn(this, (HashLink.__proto__ || Object.getPrototypeOf(HashLink)).call(this, props));

    _this.scroll = _this.scroll.bind(_this);
    _this.dispose = _this.dispose.bind(_this);
    _this.onClick = _this.onClick.bind(_this);

    _this.hashValue = '';
    if (typeof _this.props.to === 'string' && _this.props.to.indexOf('#') !== -1) {
      _this.hashValue = _this.props.to.split('#')[1];
    } else if (_typeof(_this.props.to) === 'object') {
      _this.hashValue = _this.props.to.hash.replace('#', '');
    }

    _this.observer = null;
    _this.observeTimerId = null;
    _this.isDisposed = false;

    _this.scrollOptions = {
      behavior: _this.props.behavior
    };
    return _this;
  }

  _createClass(HashLink, [{
    key: 'scroll',
    value: function scroll() {
      var _this2 = this;

      var element = document.getElementById(this.hashValue);

      if (!element) {
        return;
      }

      setTimeout(function () {
        element.scrollIntoView(_this2.scrollOptions);
      }, this.props.delay);

      // if scrolled, dispose timer and observer
      this.dispose();
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this.isDisposed = true;

      if (this.observer) {
        this.observer.disconnect();
        this.observer = null;
      }

      if (this.observeTimerId) {
        clearTimeout(this.observeTimerId);
        this.observeTimerId = null;
      }
    }
  }, {
    key: 'onClick',
    value: function onClick(e) {
      this.props.onClick(e);

      if (this.hashValue.length === 0) {
        return;
      }

      this.scroll();

      if (this.isDisposed) {
        return;
      }

      this.observer = new MutationObserver(this.scroll);
      this.observer.observe(document, {
        attributes: true,
        childList: true,
        subtree: true
      });

      this.observeTimerId = setTimeout(this.dispose, 5000);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = _extends({}, this.props);
      delete props.behavior;
      delete props.delay;

      return React.createElement(
        _reactRouterDom.Link,
        _extends({}, props, { onClick: this.onClick }),
        this.props.children
      );
    }
  }]);

  return HashLink;
}(React.Component);

HashLink.propTypes = {
  children: PropTypes.node.isRequired,
  onClick: PropTypes.func,
  behavior: PropTypes.string,
  delay: PropTypes.number,
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    hash: PropTypes.string
  })]).isRequired
};
HashLink.defaultProps = {
  onClick: function onClick() {},
  behavior: 'auto',
  delay: 0
};